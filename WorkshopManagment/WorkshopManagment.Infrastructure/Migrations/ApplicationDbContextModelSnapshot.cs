// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SewingFactory.Backend.WorkshopManagement.Infrastructure;

#nullable disable

namespace SewingFactory.Backend.WorkshopManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProcessBasedEmployeeWorkshopDocument", b =>
                {
                    b.Property<Guid>("DocumentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentsId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("ProcessBasedEmployeeWorkshopDocument");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Base.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("InternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.EmployeeTaskRepeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Repeats")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkShopEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkshopTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkShopEmployeeId");

                    b.HasIndex("WorkshopTaskId");

                    b.ToTable("EmployeeTaskRepeats", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GarmentModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GarmentModelId");

                    b.ToTable("Processes", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfModelsInvolved")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GarmentModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GarmentModelId");

                    b.ToTable("WorkshopDocuments", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProcessId");

                    b.ToTable("WorkshopTasks", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GarmentCategories", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("GarmentModels", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.RateItems.Timesheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DaysCount")
                        .HasColumnType("integer");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RateBasedEmployeeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RateBasedEmployeeId");

                    b.ToTable("Timesheets", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.RateItems.WorkDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TimesheetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TimesheetId");

                    b.ToTable("WorkDays", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Enums.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ApplicationUserProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ApplicationUserProfile", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.MicroservicePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationUserProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserProfileId");

                    b.ToTable("MicroservicePermission", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee", b =>
                {
                    b.HasBaseType("SewingFactory.Backend.WorkshopManagement.Domain.Base.Employee");

                    b.Property<decimal>("Premium")
                        .HasColumnType("numeric");

                    b.ToTable("ProcessBasedEmployees", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.RateBasedEmployee", b =>
                {
                    b.HasBaseType("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.ToTable("RateBasedEmployees", (string)null);
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.Technologist", b =>
                {
                    b.HasBaseType("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee");

                    b.Property<decimal>("SalaryPercentage")
                        .HasColumnType("numeric");

                    b.ToTable("Technologists", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessBasedEmployeeWorkshopDocument", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopDocument", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Base.Employee", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Enums.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.EmployeeTaskRepeat", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee", "WorkShopEmployee")
                        .WithMany()
                        .HasForeignKey("WorkShopEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopTask", "WorkshopTask")
                        .WithMany("EmployeeTaskRepeats")
                        .HasForeignKey("WorkshopTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkShopEmployee");

                    b.Navigation("WorkshopTask");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.Process", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Enums.Department", "Department")
                        .WithMany("Processes")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentModel", null)
                        .WithMany("Processes")
                        .HasForeignKey("GarmentModelId");

                    b.OwnsOne("SewingFactory.Common.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProcessId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("PriceAmount");

                            b1.HasKey("ProcessId");

                            b1.ToTable("Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessId");
                        });

                    b.Navigation("Department");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopDocument", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Enums.Department", "Department")
                        .WithMany("Documents")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentModel", "GarmentModel")
                        .WithMany()
                        .HasForeignKey("GarmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("GarmentModel");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopTask", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopDocument", "Document")
                        .WithMany("Tasks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentModel", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentCategory", "Category")
                        .WithMany("GarmentModels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.RateItems.Timesheet", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.RateBasedEmployee", null)
                        .WithMany("Timesheets")
                        .HasForeignKey("RateBasedEmployeeId");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.RateItems.WorkDay", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.RateBasedEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.RateItems.Timesheet", null)
                        .WithMany("WorkDays")
                        .HasForeignKey("TimesheetId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUserProfile", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUser", "ApplicationUser")
                        .WithOne("ApplicationUserProfile")
                        .HasForeignKey("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUserProfile", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.MicroservicePermission", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUserProfile", "ApplicationUserProfile")
                        .WithMany("Permissions")
                        .HasForeignKey("ApplicationUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserProfile");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Base.Employee", null)
                        .WithOne()
                        .HasForeignKey("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.RateBasedEmployee", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee", null)
                        .WithOne()
                        .HasForeignKey("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.RateBasedEmployee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.Technologist", b =>
                {
                    b.HasOne("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.ProcessBasedEmployee", null)
                        .WithOne()
                        .HasForeignKey("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.Technologist", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopDocument", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.DocumentItems.WorkshopTask", b =>
                {
                    b.Navigation("EmployeeTaskRepeats");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentCategory", b =>
                {
                    b.Navigation("GarmentModels");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Garment.GarmentModel", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.RateItems.Timesheet", b =>
                {
                    b.Navigation("WorkDays");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Enums.Department", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Employees");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserProfile");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Infrastructure.ApplicationUserProfile", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SewingFactory.Backend.WorkshopManagement.Domain.Entities.Employees.RateBasedEmployee", b =>
                {
                    b.Navigation("Timesheets");
                });
#pragma warning restore 612, 618
        }
    }
}
